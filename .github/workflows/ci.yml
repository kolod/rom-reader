name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  # Build and test software (Kotlin/Gradle)
  build-software:
    name: Build Software
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        java-version: [8, 11, 17]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('software/**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew (Unix)
      if: runner.os != 'Windows'
      run: chmod +x software/gradlew
    
    - name: Build and test with Gradle
      working-directory: software
      run: |
        ${{ runner.os == 'Windows' && '.\gradlew.bat' || './gradlew' }} build test
    
    - name: Build shadow JAR
      working-directory: software
      run: |
        ${{ runner.os == 'Windows' && '.\gradlew.bat' || './gradlew' }} shadowJar
    
    - name: Upload software artifacts (main Java version only)
      if: matrix.java-version == 8
      uses: actions/upload-artifact@v4
      with:
        name: rom-reader-software-${{ matrix.os }}
        path: software/build/libs/*.jar
        retention-days: 30

  # Build firmware (PlatformIO)
  build-firmware:
    name: Build Firmware
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Cache PlatformIO
      uses: actions/cache@v4
      with:
        path: |
          ~/.platformio
          ~/.cache/pip
        key: ${{ runner.os }}-platformio-${{ hashFiles('firmware/platformio.ini') }}
        restore-keys: |
          ${{ runner.os }}-platformio-
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install platformio
    
    - name: Build firmware
      working-directory: firmware
      run: platformio run
    
    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: rom-reader-firmware-${{ matrix.os }}
        path: |
          firmware/.pio/build/megaatmega2560/firmware.hex
          firmware/.pio/build/megaatmega2560/firmware.elf
        retention-days: 30

  # Create release if all builds succeed
  release:
    name: Create Release
    needs: [build-software, build-firmware, quality-checks]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || (github.event_name == 'release' && github.event.action == 'published')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Display downloaded artifacts
      run: find artifacts -type f -name "*" | head -20
    
    - name: Create release directory
      run: mkdir -p release
    
    - name: Prepare release files
      run: |
        # Get version from tag or release
        VERSION=${GITHUB_REF#refs/tags/}
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION=${{ github.event.release.tag_name }}
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        
        # Copy software JAR (from Ubuntu build with Java 8)
        find artifacts -name "*.jar" -path "*/rom-reader-software-ubuntu-latest/*" -exec cp {} release/rom-reader-${VERSION}.jar \; || echo "Software JAR not found"
        
        # Copy firmware HEX (from Ubuntu build)
        find artifacts -name "firmware.hex" -path "*/rom-reader-firmware-ubuntu-latest/*" -exec cp {} release/rom-reader-firmware-${VERSION}.hex \; || echo "Firmware HEX not found"
        
        # List what we have
        ls -la release/
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(env.VERSION, '-') || contains(env.VERSION, 'beta') || contains(env.VERSION, 'alpha') }}
        fail_on_unmatched_files: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Quality checks and additional validations
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: 8
        distribution: 'temurin'
    
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('software/**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Grant execute permission for gradlew
      run: chmod +x software/gradlew
    
    - name: Run tests with coverage
      working-directory: software
      run: ./gradlew test
    
    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        if find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.jks" | grep -q .; then
          echo "Warning: Sensitive files found!"
          find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.jks"
        else
          echo "No sensitive files found."
        fi
    
    - name: Validate project structure
      run: |
        echo "Validating project structure..."
        test -f software/build.gradle.kts || (echo "Missing software/build.gradle.kts" && exit 1)
        test -f firmware/platformio.ini || (echo "Missing firmware/platformio.ini" && exit 1)
        test -d software/src/main/kotlin || (echo "Missing software source directory" && exit 1)
        test -f firmware/src/main.cpp || (echo "Missing firmware source file" && exit 1)
        echo "Project structure validation passed!"